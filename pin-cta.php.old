<?php
/*
Plugin Name: Pin CTA
Description: Adds a Pinterest CTA shortcode and block with multiple design templates for the Gutenberg editor.
Version: 1.5
Author: John Ward
Author URI: https://johnathanward.com
*/

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Register the shortcode
function pin_cta_shortcode($atts) {
    // Get default text from options
    $options = get_option('pin_cta_options', array(
        'pin_cta_default_text' => 'Pin This Now to Remember It Later'
    ));
    
    // Handle both block attributes and shortcode attributes
    if (is_array($atts) && isset($atts['isInline'])) {
        // Coming from block editor
        $inline = $atts['isInline'];
        $style = isset($atts['style']) ? $atts['style'] : 'default';
        $media_id = isset($atts['mediaId']) ? $atts['mediaId'] : null;
        $media_url = isset($atts['mediaUrl']) ? $atts['mediaUrl'] : '';
        $custom_text = isset($atts['customText']) ? $atts['customText'] : $options['pin_cta_default_text'];
    } else {
        // Coming from shortcode
        $atts = shortcode_atts(array(
            'style' => 'default',
            'inline' => false,
            'media_id' => null,
            'media_url' => '',
            'custom_text' => $options['pin_cta_default_text'],
        ), $atts, 'pin_cta_button');
        $inline = filter_var($atts['inline'], FILTER_VALIDATE_BOOLEAN);
        $style = $atts['style'];
        $media_id = $atts['media_id'];
        $media_url = $atts['media_url'];
        $custom_text = $atts['custom_text'];
    }

    $inline_class = $inline ? ' pin-cta-inline' : '';
    
    // Determine which image URL to use
    $image_url = '';
    if (!empty($media_url)) {
        $image_url = $media_url;
    } elseif (!empty($media_id)) {
        $image_url = wp_get_attachment_url($media_id);
    } else {
        // Attempt to find the first image in the post content
        $post_content = get_post_field('post_content', get_the_ID());
        preg_match('/<img[^>]+src=[\'"]([^\'"]+)[\'"][^>]*>/i', $post_content, $image);
        if (!empty($image[1])) {
            $image_url = $image[1];
        } else {
            // Check for Open Graph image
            $og_image = get_post_meta(get_the_ID(), '_yoast_wpseo_opengraph-image', true);
            if (!$og_image) {
                $og_image = get_post_meta(get_the_ID(), '_rank_math_facebook_image', true);
            }
            if ($og_image) {
                $image_url = $og_image;
            } elseif (has_post_thumbnail()) {
                $image_url = get_the_post_thumbnail_url();
            }
        }
    }
    
    ob_start();
    ?>
    <div class="pin-cta-container pin-cta-<?php echo esc_attr($style); ?><?php echo $inline_class; ?>">
        <div class="pin-cta-logo">
            <img src="<?php echo esc_url(plugins_url('images/pinterest-logo.png', __FILE__)); ?>" alt="Pinterest">
        </div>
        <div class="pin-cta-text"><?php echo esc_html($custom_text); ?></div>
        <a href="https://pinterest.com/pin/create/button/?url=<?php echo urlencode(get_permalink()); ?>&media=<?php echo esc_url($image_url); ?>&description=<?php echo urlencode(get_the_title()); ?>" target="_blank" class="pin-cta-button">
            <svg class="pin-cta-pinterest-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20">
                <path d="M12.017 0C5.396 0 .029 5.367..."/>
            </svg>
            <span class="pin-cta-button-text">Pin This</span>
        </a>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('pin_cta_button', 'pin_cta_shortcode');

function pin_cta_register_block() {
    // Get default options
    $options = get_option('pin_cta_options', array(
        'pin_cta_default_style' => 'style1',
        'pin_cta_default_layout' => 'block',
        'pin_cta_default_text' => 'Pin This Now to Remember It Later'
    ));

    // Register the block's script
    wp_register_script(
        'pin-cta-block',
        plugins_url('blocks/block.js', __FILE__),
        array('wp-blocks', 'wp-editor', 'wp-element', 'wp-i18n'),
        filemtime(plugin_dir_path(__FILE__) . 'blocks/block.js')
    );

    // Localize the script with default values
    wp_localize_script('pin-cta-block', 'pinCtaDefaults', array(
        'style' => $options['pin_cta_default_style'],
        'isInline' => $options['pin_cta_default_layout'] === 'inline',
        'text' => $options['pin_cta_default_text'],
        'pluginUrl' => plugins_url('', __FILE__)
    ));

    // Register block styles for both frontend and editor
    wp_register_style(
        'pin-cta-style',
        plugins_url('blocks/style.css', __FILE__),
        array(),
        filemtime(plugin_dir_path(__FILE__) . 'blocks/style.css')
    );

    // Register editor-only styles
    wp_register_style(
        'pin-cta-editor',
        plugins_url('blocks/editor.css', __FILE__),
        array('pin-cta-style'), // Make sure editor styles load after main styles
        filemtime(plugin_dir_path(__FILE__) . 'blocks/editor.css')
    );

    // Register the block with all assets
    register_block_type('pin-cta/cta-block', array(
        'editor_script' => 'pin-cta-block',
        'editor_style' => 'pin-cta-editor',
        'style' => 'pin-cta-style',
        'render_callback' => 'pin_cta_shortcode',
        'attributes' => array(
            'style' => array(
                'type' => 'string',
                'default' => $options['pin_cta_default_style']
            ),
            'isInline' => array(
                'type' => 'boolean',
                'default' => $options['pin_cta_default_layout'] === 'inline'
            ),
            'mediaId' => array(
                'type' => 'number'
            ),
            'mediaUrl' => array(
                'type' => 'string'
            ),
            'customText' => array(
                'type' => 'string',
                'default' => $options['pin_cta_default_text']
            )
        )
    ));
}
add_action('init', 'pin_cta_register_block');

add_action('admin_menu', 'pin_cta_add_admin_menu');
add_action('admin_init', 'pin_cta_settings_init');

function pin_cta_add_admin_menu() {
    add_menu_page(
        'Pin CTA Settings',
        'Pin CTA',
        'manage_options',
        'pin_cta',
        'pin_cta_options_page'
    );
}

function pin_cta_settings_init() {
    register_setting('pin_cta_settings', 'pin_cta_options');

    add_settings_section(
        'pin_cta_section',
        __('Settings for Pin CTA', 'pin-cta'),
        null,
        'pin_cta_settings'
    );

    add_settings_field(
        'pin_cta_default_style',
        __('Default Style', 'pin-cta'),
        'pin_cta_default_style_render',
        'pin_cta_settings',
        'pin_cta_section'
    );

    add_settings_field(
        'pin_cta_default_layout',
        __('Default Layout', 'pin-cta'),
        'pin_cta_default_layout_render',
        'pin_cta_settings',
        'pin_cta_section'
    );

    add_settings_field(
        'pin_cta_default_text',
        __('Default Text', 'pin-cta'),
        'pin_cta_default_text_render',
        'pin_cta_settings',
        'pin_cta_section'
    );
}

function pin_cta_default_style_render() {
    $options = get_option('pin_cta_options', array(
        'pin_cta_default_style' => 'style0'
    ));
    ?>
    <select name="pin_cta_options[pin_cta_default_style]">
        <option value="style0" <?php selected($options['pin_cta_default_style'], 'style0'); ?>>Classic Red & White</option>
        <option value="style1" <?php selected($options['pin_cta_default_style'], 'style1'); ?>>Burgundy & Gold</option>
        <option value="style2" <?php selected($options['pin_cta_default_style'], 'style2'); ?>>Fresh Green & White</option>
        <option value="style3" <?php selected($options['pin_cta_default_style'], 'style3'); ?>>Soft Pink & Rose</option>
        <option value="style4" <?php selected($options['pin_cta_default_style'], 'style4'); ?>>Navy & Gold</option>
        <option value="style5" <?php selected($options['pin_cta_default_style'], 'style5'); ?>>Sage & Cream</option>
        <option value="style6" <?php selected($options['pin_cta_default_style'], 'style6'); ?>>Royal Purple & Lavender</option>
        <option value="style7" <?php selected($options['pin_cta_default_style'], 'style7'); ?>>Ocean Teal & Coral</option>
        <option value="style8" <?php selected($options['pin_cta_default_style'], 'style8'); ?>>Midnight Blue & Silver</option>
        <option value="style9" <?php selected($options['pin_cta_default_style'], 'style9'); ?>>Autumn Orange & Cream</option>
        <option value="style10" <?php selected($options['pin_cta_default_style'], 'style10'); ?>>Forest & Mint</option>
    </select>
    <?php
}

function pin_cta_default_layout_render() {
    $options = get_option('pin_cta_options', array(
        'pin_cta_default_layout' => 'block'
    ));
    ?>
    <select name="pin_cta_options[pin_cta_default_layout]">
        <option value="block" <?php selected($options['pin_cta_default_layout'], 'block'); ?>>Block</option>
        <option value="inline" <?php selected($options['pin_cta_default_layout'], 'inline'); ?>>Inline</option>
    </select>
    <?php
}

function pin_cta_default_text_render() {
    $options = get_option('pin_cta_options');
    ?>
    <input type="text" name="pin_cta_options[pin_cta_default_text]" value="<?php echo esc_attr($options['pin_cta_default_text'] ?? 'Pin This Now to Remember It Later'); ?>" />
    <?php
}

function pin_cta_options_page() {
    ?>
    <form action="options.php" method="post">
        <h2>Pin CTA Settings</h2>
        <?php
        settings_fields('pin_cta_settings');
        do_settings_sections('pin_cta_settings');
        submit_button();
        ?>
    </form>
    <?php
}

// Enqueue the styles for the frontend
function pincta4x34d_enqueue_frontend_styles() {
    // Always enqueue styles for shortcode support
    wp_enqueue_style('pin-cta-style');
    
    // Optionally, you can still check for blocks
    // if (has_block('pin-cta/cta-block') || has_shortcode(get_post()->post_content, 'pin_cta_button')) {
    //     wp_enqueue_style('pin-cta-style');
    // }
}
add_action('wp_enqueue_scripts', 'pincta4x34d_enqueue_frontend_styles');

// Add this function to ensure shortcodes are processed in block content
function pin_cta_render_shortcode_in_block($block_content) {
    return do_shortcode($block_content);
}
add_filter('render_block', 'pin_cta_render_shortcode_in_block');
