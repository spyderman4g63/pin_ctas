const { registerBlockType } = wp.blocks;
const { createElement } = wp.element;
const { InspectorControls, MediaUpload, MediaUploadCheck } = wp.blockEditor;
const { PanelBody, SelectControl, ToggleControl, Button } = wp.components;

// Make sure pinCtaDefaults is defined
if (typeof pinCtaDefaults === 'undefined') {
    window.pinCtaDefaults = {
        style: 'style1',
        isInline: false,
        text: 'Pin This Now to Remember It Later',
        pluginUrl: ''
    };
}

registerBlockType('pin-cta/cta-block', {
    title: 'Pin CTA',
    icon: 'pinterest',
    category: 'widgets',
    
    // Add editor and style dependencies
    editorStyle: 'pin-cta-editor',
    style: 'pin-cta-style',
    
    attributes: {
        style: {
            type: 'string',
            default: pinCtaDefaults.style
        },
        isInline: {
            type: 'boolean',
            default: pinCtaDefaults.isInline
        },
        customText: {
            type: 'string',
            default: pinCtaDefaults.text
        },
        mediaId: {
            type: 'number'
        },
        mediaUrl: {
            type: 'string'
        }
    },
    
    supports: {
        align: true,
        html: false
    },
    
    edit: function(props) {
        const { attributes, setAttributes } = props;
        const containerClasses = `pin-cta-container${attributes.isInline ? ' pin-cta-inline' : ''} pin-cta-${attributes.style}`;
        
        // Create the block preview
        const blockPreview = createElement(
            'div',
            {
                className: containerClasses
            },
            [
                createElement('div', 
                    { 
                        className: 'pin-cta-logo'
                    },
                    createElement('img', {
                        src: `${pinCtaDefaults.pluginUrl}/images/pinterest-logo.png`,
                        alt: 'Pinterest'
                    })
                ),
                createElement('div', 
                    { 
                        className: 'pin-cta-text'
                    }, 
                    attributes.customText || pinCtaDefaults.text
                ),
                createElement('a',
                    {
                        className: 'pin-cta-button',
                        href: '#'
                    },
                    [
                        createElement('svg', {
                            className: 'pin-cta-pinterest-icon',
                            xmlns: "http://www.w3.org/2000/svg",
                            viewBox: '0 0 24 24',
                            width: "20",
                            height: "20"
                        }, 
                        createElement('path', {
                            d: 'M12.017 0C5.396 0 .029 5.367...'
                        })),
                        createElement('span', 
                            { 
                                className: 'pin-cta-button-text'
                            }, 
                            'Pin This'
                        )
                    ]
                )
            ]
        );

        // In the edit function, before the return statement, add this logic to determine the current style
        const currentStyle = attributes.style || pinCtaDefaults.style;

        return [
            createElement(InspectorControls, {},
                createElement(PanelBody, { title: 'Style Settings' },
                    [
                        createElement(SelectControl, {
                            label: 'Style',
                            value: currentStyle,
                            options: [
                                { label: 'Classic Red & White', value: 'default' },
                                { label: 'Burgundy & Gold', value: 'style1' },
                                { label: 'Fresh Green & White', value: 'style2' },
                                { label: 'Soft Pink & Rose', value: 'style3' },
                                { label: 'Navy & Gold', value: 'style4' },
                                { label: 'Sage & Cream', value: 'style5' },
                                { label: 'Royal Purple & Lavender', value: 'style6' },
                                { label: 'Ocean Teal & Coral', value: 'style7' },
                                { label: 'Midnight Blue & Silver', value: 'style8' },
                                { label: 'Autumn Orange & Cream', value: 'style9' },
                                { label: 'Forest & Mint', value: 'style10' }
                            ],
                            onChange: (newStyle) => setAttributes({ style: newStyle })
                        }),
                        createElement(ToggleControl, {
                            label: 'Inline Layout',
                            checked: attributes.isInline,
                            onChange: (isInline) => setAttributes({ isInline })
                        }),
                        createElement(MediaUploadCheck, null,
                            createElement(MediaUpload, {
                                onSelect: (media) => {
                                    setAttributes({
                                        mediaId: media.id,
                                        mediaUrl: media.url
                                    });
                                },
                                allowedTypes: ['image'],
                                value: attributes.mediaId,
                                render: ({ open }) => createElement(
                                    'div',
                                    null,
                                    [
                                        createElement('p', null, 'Custom Pinterest Image'),
                                        attributes.mediaUrl && createElement(
                                            'img',
                                            {
                                                src: attributes.mediaUrl,
                                                style: { maxWidth: '200px', display: 'block', marginBottom: '10px' }
                                            }
                                        ),
                                        createElement(
                                            Button,
                                            {
                                                onClick: open,
                                                isSecondary: true
                                            },
                                            attributes.mediaId ? 'Change Image' : 'Select Image'
                                        ),
                                        attributes.mediaId && createElement(
                                            Button,
                                            {
                                                onClick: () => setAttributes({ mediaId: null, mediaUrl: null }),
                                                isLink: true,
                                                isDestructive: true
                                            },
                                            'Remove Image'
                                        )
                                    ]
                                )
                            })
                        )
                    ]
                )
            ),
            blockPreview
        ];
    },
    
    save: function() {
        return null;
    }
});
